@page "/detialmaker/{id:int}"
@inject IUntiWork db
@inject ISessionStorageService session
@inject IToastService toast

@if (_maker is not null)
{
    <div class="container rightdv">
        <HeadPage NameArbic="@_maker.NameMaker" NameEnglish="@_maker.NameMaker.NameToEnglish()"></HeadPage>
        <div class="card">
            <div class="card-body">
                <h6 class="text-center text-info">تقيم عام : @_maker.AverageEvaluation %</h6>
                <div class="progress">
                    <div class="progress-bar progress-bar-striped @BG" role="progressbar" style="width: @_maker.AverageEvaluation%" aria-valuenow="@_maker.AverageEvaluation" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <div class="row justify-content-between mt-2">
                    <div class="col-md-5 text-right">
                        <h6>@_maker.JopTitel</h6>
                    </div>
                    <div class="text-right">
                        <h6>اجمالى حساب الاعمال : @_maker.TotalPrice.ToMoney() (@_maker.TotalPrice.ConvertNumberToText())</h6>
                    </div>
                </div>
                <div class="row justify-content-between">
                    <div class="col-md-5 text-right">
                        <h6 class="text-dark">متوسط اجرة : @_maker.AveragePriceing</h6>
                    </div>
                    <div class="text-right">
                        <h6>عدد الاعمال القائم بها لدينا : @_maker.CountTask</h6>
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-6">
                @if (_maker.BuildingCosts != null)
                {
                    <div class="card">
                        <div class="card-body">
                             <h3>عمليات بناء</h3>
                            <ShowTable Class="table-light" itemtype="BuildingCost" TheadClass="thead-light" Items="_maker.BuildingCosts.Where(x=>x.ISPaymentDone)">
                                <Columns>
                                    <th>المشروع</th>
                                    <th>المبلغ</th>
                                    <th>التقيم</th>
                                </Columns>
                                <Rows>
                                    <td>
                                         @context.Project.ProjectName
                                        <p>@context.Date.ToDate()</p>
                                    </td>
                                    <td>
                                        @context.TotalPrice.ToMoney()
                                        <p>@context.TotalPrice.ConvertNumberToText()</p>
                                    </td>
                                    <td>
                                        <p>@context.Evaluation %</p>
                                        <input type="range" class="form-control-range" max="100" min="0" @onchange="getsavede" @bind-value:event="oninput" @bind-value="context.Evaluation" />
                                    </td>
                                </Rows>
                            </ShowTable>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-6">
                  @if (_maker.FinishCosts != null)
                {
                    <div class="card">
                        <div class="card-body">
                             <h3>عمليات تشطيب</h3>
                            <ShowTable Class="table-light" itemtype="FinishCost" TheadClass="thead-light" Items="_maker.FinishCosts.Where(x=>x.ISPaymentDone)">
                                <Columns>
                                    <th>الوحدة</th>
                                    <th>المبلغ</th>
                                    <th>التقيم</th>
                                </Columns>
                                <Rows>
                                    <td>
                                         @context.FinishUnit.Customer.NameCustomer
                                        <p>@context.Date.ToDate()</p>
                                    </td>
                                    <td>
                                        @context.TotalPrice.ToMoney()
                                        <p>@context.TotalPrice.ConvertNumberToText()</p>
                                    </td>
                                    <td>
                                        <p>@context.Evaluation %</p>
                                        <input type="range" class="form-control-range" max="100" min="0" @onchange="getsavede" @bind-value:event="oninput" @bind-value="context.Evaluation" />
                                    </td>
                                </Rows>
                            </ShowTable>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}





@code {

    [Parameter]
    public int id { get; set; }

    [Inject]
    public NavigationManager? nav { get; set; }

    Maker? _maker = null;

    protected override async Task OnInitializedAsync()
    {
        var log = await session.GetItemAsync<LogAdmins>("loguser");
        if (!log.ISAdmin)
        {
            nav.NavigateTo("");
        }
        await GetMaker();
    }

    async Task getsavede()
    {
        await db.SaveChangeAsync();
    }

    async Task GetMaker()
    {
        _maker = await db.Makers.Include(b => b.BuildingCosts).ThenInclude(p => p.Project)
                           .Include(f => f.FinishCosts).ThenInclude(c => c.FinishUnit).ThenInclude(c => c.Customer)
                           .Include(w => w.Weight).FirstOrDefaultAsync(x => x.Id == id);
    }

    private string BG
    {
        get
        {
            if (_maker.AverageEvaluation >= 0 && _maker.AverageEvaluation < 35)
                return "bg-danger";
            else if (_maker.AverageEvaluation >= 35 && _maker.AverageEvaluation < 59)
                return "bg-warning";
            else if (_maker.AverageEvaluation >= 59 && _maker.AverageEvaluation < 75)
                return "bg-warning";
            else if (_maker.AverageEvaluation >= 75 && _maker.AverageEvaluation < 85)
                return "bg-info";
            else if (_maker.AverageEvaluation >= 85 && _maker.AverageEvaluation <= 100)
                return "bg-success";

            return "";
        }
    }

}
