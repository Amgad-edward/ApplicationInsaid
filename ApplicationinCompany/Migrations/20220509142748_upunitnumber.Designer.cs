// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheModels.Models;

#nullable disable

namespace ApplicationinCompany.Migrations
{
    [DbContext(typeof(ContextApplication))]
    [Migration("20220509142748_upunitnumber")]
    partial class upunitnumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TheModels.Models.AccountOtherCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Idcompany")
                        .HasColumnType("int");

                    b.Property<decimal>("Maney")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("OtherCompaniesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OtherCompaniesId");

                    b.ToTable("accountothercompany");
                });

            modelBuilder.Entity("TheModels.Models.AllSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discription")
                        .HasMaxLength(1200)
                        .HasColumnType("varchar(1200)");

                    b.Property<string>("Link")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TitelAfter")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<byte>("titelSubject")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("allsubjects");
                });

            modelBuilder.Entity("TheModels.Models.AttendingAndLeaving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Attending")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Idemplyee")
                        .HasColumnType("int");

                    b.Property<bool>("Leaving")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Idemplyee");

                    b.ToTable("attendingandleaving");
                });

            modelBuilder.Entity("TheModels.Models.BuildingCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CountWeight")
                        .HasColumnType("double");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("IdMaterial")
                        .HasColumnType("int");

                    b.Property<int>("IdProject")
                        .HasColumnType("int");

                    b.Property<int?>("Idmaker")
                        .HasColumnType("int");

                    b.Property<string>("ToAccount")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("IdMaterial");

                    b.HasIndex("IdProject");

                    b.HasIndex("Idmaker");

                    b.ToTable("buildingcost");
                });

            modelBuilder.Entity("TheModels.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("TheModels.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Information")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Locations")
                        .HasMaxLength(115)
                        .HasColumnType("varchar(115)");

                    b.Property<byte[]>("Logo")
                        .HasMaxLength(10000000)
                        .HasColumnType("longblob");

                    b.Property<string>("NameCompany")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Phones")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.HasKey("Id");

                    b.ToTable("company");
                });

            modelBuilder.Entity("TheModels.Models.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<byte>("NameContect")
                        .HasMaxLength(30)
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("TheModels.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("EvaluationCompany")
                        .HasColumnType("double");

                    b.Property<string>("GideID")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Jop")
                        .HasMaxLength(33)
                        .HasColumnType("varchar(33)");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("PhoneSms")
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Phones")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.HasKey("Id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("TheModels.Models.Emplyee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BaseSalery")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTimeWork")
                        .HasColumnType("time(0)");

                    b.Property<string>("GideID")
                        .HasMaxLength(97)
                        .HasColumnType("varchar(97)");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(10000000)
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<double>("Persant")
                        .HasColumnType("double");

                    b.Property<TimeOnly>("StartTimeWork")
                        .HasColumnType("time(0)");

                    b.Property<DateOnly>("StartWork")
                        .HasColumnType("date");

                    b.Property<byte>("TheJop")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TitleJop")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("WeekEnd")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("emplyee");
                });

            modelBuilder.Entity("TheModels.Models.FinishCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("IdMaterail")
                        .HasColumnType("int");

                    b.Property<int>("IdUnitFinish")
                        .HasColumnType("int");

                    b.Property<int?>("Idmaker")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercantOfmaterial")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdUnitFinish");

                    b.HasIndex("Idmaker");

                    b.HasIndex("MaterialId");

                    b.ToTable("finishcost");
                });

            modelBuilder.Entity("TheModels.Models.FinishesUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .HasMaxLength(77)
                        .HasColumnType("varchar(77)");

                    b.Property<int?>("IdCompanysGet")
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int?>("IdEpmlyee")
                        .HasColumnType("int");

                    b.Property<int?>("IdUintResertvation")
                        .HasColumnType("int");

                    b.Property<int>("Idcategory")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasMaxLength(170)
                        .HasColumnType("varchar(170)");

                    b.Property<double>("SapceMetar")
                        .HasColumnType("double");

                    b.Property<bool>("ShowInWebSaite")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("TotalPriceBuy")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdCompanysGet");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdEpmlyee");

                    b.HasIndex("Idcategory");

                    b.ToTable("finishesunit");
                });

            modelBuilder.Entity("TheModels.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameFloor")
                        .IsRequired()
                        .HasMaxLength(47)
                        .HasColumnType("varchar(47)");

                    b.HasKey("Id");

                    b.ToTable("floor");
                });

            modelBuilder.Entity("TheModels.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("IdSunject")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectsId");

                    b.ToTable("gallery");
                });

            modelBuilder.Entity("TheModels.Models.ImageDesignFinish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdunitFinish")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(100000000)
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("IdunitFinish");

                    b.ToTable("imagedesignfinish");
                });

            modelBuilder.Entity("TheModels.Models.LogAdmins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ISAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("IdEmplyee")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmplyee");

                    b.ToTable("logadminis");
                });

            modelBuilder.Entity("TheModels.Models.LogCustomers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("UserNameOrEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("logcustomers");
                });

            modelBuilder.Entity("TheModels.Models.LogEmplyee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idemplyee")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("Idemplyee");

                    b.ToTable("logemplyee");
                });

            modelBuilder.Entity("TheModels.Models.Maker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Evaluation")
                        .HasColumnType("double");

                    b.Property<string>("GideID")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("JopTitel")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("NameMaker")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Phones")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.HasKey("Id");

                    b.ToTable("maker");
                });

            modelBuilder.Entity("TheModels.Models.Materials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idweight")
                        .HasColumnType("int");

                    b.Property<string>("NameMaterial")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("Idweight");

                    b.ToTable("materials");
                });

            modelBuilder.Entity("TheModels.Models.OtherCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<bool>("IsCompanyToBenefit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Iscompetitivecompany")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NameManegar")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<double>("Persant")
                        .HasColumnType("double");

                    b.Property<byte>("Specialty")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("othercompanies");
                });

            modelBuilder.Entity("TheModels.Models.PaymentMoney", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CashPayment")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePayment")
                        .HasColumnType(" date");

                    b.Property<bool>("DonePayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Idsale")
                        .HasColumnType("int");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NumberPaymentProcess")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("Paymentis")
                        .HasColumnType("int");

                    b.Property<string>("SheekBank")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("ID");

                    b.HasIndex("Idsale");

                    b.ToTable("paymantmoney");
                });

            modelBuilder.Entity("TheModels.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountFloor")
                        .HasColumnType("int");

                    b.Property<string>("ProjectInfo")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<double>("TotalSapce")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("project");
                });

            modelBuilder.Entity("TheModels.Models.ProjectImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idproject")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(10000000)
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("Idproject");

                    b.ToTable("projectimage");
                });

            modelBuilder.Entity("TheModels.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BackcallHim")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1200)
                        .HasColumnType("varchar(1200)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("DoNotAgree")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoneReport")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HeIsCome")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdEmplyee")
                        .HasColumnType("int");

                    b.Property<bool>("IsOkyDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Telephone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Think")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Titel")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("WhatsApp")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("idCustomer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmplyee");

                    b.HasIndex("idCustomer");

                    b.ToTable("report");
                });

            modelBuilder.Entity("TheModels.Models.ResertvationAndSale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateSale")
                        .HasColumnType("date");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int?>("IdEmplyee")
                        .HasColumnType("int");

                    b.Property<int?>("IdFinishUint")
                        .HasColumnType("int");

                    b.Property<int>("IdUnit")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAdding")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalPriceBuy")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("systemPayments")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdEmplyee");

                    b.HasIndex("IdFinishUint")
                        .IsUnique();

                    b.HasIndex("IdUnit");

                    b.ToTable("resertvationandsale");
                });

            modelBuilder.Entity("TheModels.Models.SaleryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idemplyee")
                        .HasColumnType("int");

                    b.Property<decimal>("MoneyTake")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SaleOF")
                        .HasColumnType("int");

                    b.Property<int>("ToMonth")
                        .HasColumnType("int");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Idemplyee");

                    b.ToTable("salerypayment");
                });

            modelBuilder.Entity("TheModels.Models.TaskCarry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("DoneTask")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdEmplyee")
                        .HasColumnType("int");

                    b.Property<string>("Resulte")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TheTask")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdEmplyee");

                    b.ToTable("taskcarry");
                });

            modelBuilder.Entity("TheModels.Models.UnitProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AdvertisementForTheCustomer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Guid")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("IdFloor")
                        .HasColumnType("int");

                    b.Property<int>("IdProject")
                        .HasColumnType("int");

                    b.Property<int?>("IdResetvationsale")
                        .HasColumnType("int");

                    b.Property<int>("Idcategory")
                        .HasColumnType("int");

                    b.Property<byte[]>("MapImage")
                        .HasMaxLength(10000000)
                        .HasColumnType("longblob");

                    b.Property<double>("SpaceMater")
                        .HasColumnType("double");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdFloor");

                    b.HasIndex("IdProject");

                    b.HasIndex("IdResetvationsale");

                    b.HasIndex("Idcategory");

                    b.ToTable("unitproject");
                });

            modelBuilder.Entity("TheModels.Models.Weight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CountOfSmall")
                        .HasColumnType("double");

                    b.Property<int?>("IdWeightsmall")
                        .HasColumnType("int");

                    b.Property<string>("NameWeight")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("varchar(31)");

                    b.HasKey("Id");

                    b.HasIndex("IdWeightsmall");

                    b.ToTable("weight");
                });

            modelBuilder.Entity("TheModels.Models.AccountOtherCompany", b =>
                {
                    b.HasOne("TheModels.Models.OtherCompanies", "OtherCompanies")
                        .WithMany("Accounts")
                        .HasForeignKey("OtherCompaniesId");

                    b.Navigation("OtherCompanies");
                });

            modelBuilder.Entity("TheModels.Models.AttendingAndLeaving", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany("AttendingAndLeavings")
                        .HasForeignKey("Idemplyee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.BuildingCost", b =>
                {
                    b.HasOne("TheModels.Models.Materials", "Material")
                        .WithMany()
                        .HasForeignKey("IdMaterial");

                    b.HasOne("TheModels.Models.Project", "Project")
                        .WithMany("BuildingCosts")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Maker", "Maker")
                        .WithMany("BuildingCosts")
                        .HasForeignKey("Idmaker");

                    b.Navigation("Maker");

                    b.Navigation("Material");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TheModels.Models.FinishCost", b =>
                {
                    b.HasOne("TheModels.Models.FinishesUnit", "FinishUnit")
                        .WithMany("FinishCosts")
                        .HasForeignKey("IdUnitFinish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Maker", "Maker")
                        .WithMany("FinishCosts")
                        .HasForeignKey("Idmaker");

                    b.HasOne("TheModels.Models.Materials", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.Navigation("FinishUnit");

                    b.Navigation("Maker");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("TheModels.Models.FinishesUnit", b =>
                {
                    b.HasOne("TheModels.Models.OtherCompanies", "ByCompany")
                        .WithMany("SaleToFinish")
                        .HasForeignKey("IdCompanysGet");

                    b.HasOne("TheModels.Models.Customer", "Customer")
                        .WithMany("FinishesUnits")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Emplyee", "ByEmplyee")
                        .WithMany("AllSaleToFinishUnit")
                        .HasForeignKey("IdEpmlyee");

                    b.HasOne("TheModels.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Idcategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ByCompany");

                    b.Navigation("ByEmplyee");

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TheModels.Models.Gallery", b =>
                {
                    b.HasOne("TheModels.Models.AllSubjects", "Subjects")
                        .WithMany("Images")
                        .HasForeignKey("SubjectsId");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TheModels.Models.ImageDesignFinish", b =>
                {
                    b.HasOne("TheModels.Models.FinishesUnit", "Finishunit")
                        .WithMany("ImageDesignFinishes")
                        .HasForeignKey("IdunitFinish")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Finishunit");
                });

            modelBuilder.Entity("TheModels.Models.LogAdmins", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany()
                        .HasForeignKey("IdEmplyee");

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.LogCustomers", b =>
                {
                    b.HasOne("TheModels.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TheModels.Models.LogEmplyee", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany()
                        .HasForeignKey("Idemplyee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.Materials", b =>
                {
                    b.HasOne("TheModels.Models.Weight", "Weight")
                        .WithMany()
                        .HasForeignKey("Idweight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("TheModels.Models.PaymentMoney", b =>
                {
                    b.HasOne("TheModels.Models.ResertvationAndSale", "RevervationSale")
                        .WithMany("PaymentMoney")
                        .HasForeignKey("Idsale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RevervationSale");
                });

            modelBuilder.Entity("TheModels.Models.ProjectImage", b =>
                {
                    b.HasOne("TheModels.Models.Project", "Project")
                        .WithMany("ImageProject")
                        .HasForeignKey("Idproject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TheModels.Models.Report", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany("Reports")
                        .HasForeignKey("IdEmplyee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Customer", "Customer")
                        .WithMany("Reports")
                        .HasForeignKey("idCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.ResertvationAndSale", b =>
                {
                    b.HasOne("TheModels.Models.Customer", "ToCustomer")
                        .WithMany("Units")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Emplyee", "ByEmplyee")
                        .WithMany("AllSalesFormThisEmplyee")
                        .HasForeignKey("IdEmplyee");

                    b.HasOne("TheModels.Models.FinishesUnit", "FinishUnit")
                        .WithOne("UnitResertvation")
                        .HasForeignKey("TheModels.Models.ResertvationAndSale", "IdFinishUint");

                    b.HasOne("TheModels.Models.UnitProject", "Unit")
                        .WithMany()
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ByEmplyee");

                    b.Navigation("FinishUnit");

                    b.Navigation("ToCustomer");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TheModels.Models.SaleryPayment", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany("saleryPayments")
                        .HasForeignKey("Idemplyee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.TaskCarry", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany("TaskCarries")
                        .HasForeignKey("IdEmplyee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.UnitProject", b =>
                {
                    b.HasOne("TheModels.Models.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("IdFloor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Project", "Project")
                        .WithMany("UnitProjects")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.ResertvationAndSale", "ReservationSale")
                        .WithMany()
                        .HasForeignKey("IdResetvationsale");

                    b.HasOne("TheModels.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Idcategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Floor");

                    b.Navigation("Project");

                    b.Navigation("ReservationSale");
                });

            modelBuilder.Entity("TheModels.Models.Weight", b =>
                {
                    b.HasOne("TheModels.Models.Weight", "Weightsmall")
                        .WithMany()
                        .HasForeignKey("IdWeightsmall");

                    b.Navigation("Weightsmall");
                });

            modelBuilder.Entity("TheModels.Models.AllSubjects", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("TheModels.Models.Customer", b =>
                {
                    b.Navigation("FinishesUnits");

                    b.Navigation("Reports");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("TheModels.Models.Emplyee", b =>
                {
                    b.Navigation("AllSaleToFinishUnit");

                    b.Navigation("AllSalesFormThisEmplyee");

                    b.Navigation("AttendingAndLeavings");

                    b.Navigation("Reports");

                    b.Navigation("TaskCarries");

                    b.Navigation("saleryPayments");
                });

            modelBuilder.Entity("TheModels.Models.FinishesUnit", b =>
                {
                    b.Navigation("FinishCosts");

                    b.Navigation("ImageDesignFinishes");

                    b.Navigation("UnitResertvation");
                });

            modelBuilder.Entity("TheModels.Models.Maker", b =>
                {
                    b.Navigation("BuildingCosts");

                    b.Navigation("FinishCosts");
                });

            modelBuilder.Entity("TheModels.Models.OtherCompanies", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SaleToFinish");
                });

            modelBuilder.Entity("TheModels.Models.Project", b =>
                {
                    b.Navigation("BuildingCosts");

                    b.Navigation("ImageProject");

                    b.Navigation("UnitProjects");
                });

            modelBuilder.Entity("TheModels.Models.ResertvationAndSale", b =>
                {
                    b.Navigation("PaymentMoney");
                });
#pragma warning restore 612, 618
        }
    }
}
