// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheModels.Models;

#nullable disable

namespace ApplicationinCompany.Migrations
{
    [DbContext(typeof(ContextApplication))]
    [Migration("20220429114630_CreateData")]
    partial class CreateData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TheModels.Models.AttendingAndLeaving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Attending")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Idemplyee")
                        .HasColumnType("int");

                    b.Property<bool>("Leaving")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Idemplyee");

                    b.ToTable("attendingandleaving");
                });

            modelBuilder.Entity("TheModels.Models.BuildingCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CountWeight")
                        .HasColumnType("double");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("IdMaterial")
                        .HasColumnType("int");

                    b.Property<int>("IdProject")
                        .HasColumnType("int");

                    b.Property<string>("ToAccount")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("IdMaterial");

                    b.HasIndex("IdProject");

                    b.ToTable("buildingcost");
                });

            modelBuilder.Entity("TheModels.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("TheModels.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Information")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Locations")
                        .HasMaxLength(115)
                        .HasColumnType("varchar(115)");

                    b.Property<byte[]>("Logo")
                        .HasMaxLength(10000000)
                        .HasColumnType("longblob");

                    b.Property<string>("NameCompany")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Phones")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.HasKey("Id");

                    b.ToTable("company");
                });

            modelBuilder.Entity("TheModels.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GideID")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("PhoneSms")
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<string>("Phones")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.HasKey("Id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("TheModels.Models.Emplyee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BaseSalery")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<TimeOnly?>("EndTimeWork")
                        .HasColumnType("time(0)");

                    b.Property<string>("GideID")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("Persant")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("StartTimeWork")
                        .HasColumnType("time(0)");

                    b.Property<DateOnly>("StartWork")
                        .HasColumnType("date");

                    b.Property<string>("TitleJop")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("WeekEnd")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("emplyee");
                });

            modelBuilder.Entity("TheModels.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameFloor")
                        .IsRequired()
                        .HasMaxLength(47)
                        .HasColumnType("varchar(47)");

                    b.HasKey("Id");

                    b.ToTable("floor");
                });

            modelBuilder.Entity("TheModels.Models.Materials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idweight")
                        .HasColumnType("int");

                    b.Property<string>("NameMaterial")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("Idweight");

                    b.ToTable("materials");
                });

            modelBuilder.Entity("TheModels.Models.PaymentMoney", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CashPayment")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePayment")
                        .HasColumnType(" date");

                    b.Property<bool>("DonePayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Idsale")
                        .HasColumnType("int");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NumberPaymentProcess")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("Paymentis")
                        .HasColumnType("int");

                    b.Property<string>("SheekBank")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("ID");

                    b.HasIndex("Idsale");

                    b.ToTable("paymantmoney");
                });

            modelBuilder.Entity("TheModels.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountFloor")
                        .HasColumnType("int");

                    b.Property<string>("ProjectInfo")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<double>("TotalSapce")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("project");
                });

            modelBuilder.Entity("TheModels.Models.ProjectImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idproject")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(10000000)
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("Idproject");

                    b.ToTable("projectimage");
                });

            modelBuilder.Entity("TheModels.Models.ResertvationAndSale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateSale")
                        .HasColumnType("date");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int?>("IdEmplyee")
                        .HasColumnType("int");

                    b.Property<int>("IdUnit")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAdding")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalPriceBuy")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("systemPayments")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdEmplyee");

                    b.HasIndex("IdUnit");

                    b.ToTable("resertvationandsale");
                });

            modelBuilder.Entity("TheModels.Models.SaleryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Idemplyee")
                        .HasColumnType("int");

                    b.Property<decimal>("MoneyTake")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SaleOF")
                        .HasColumnType("int");

                    b.Property<int>("ToMonth")
                        .HasColumnType("int");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Idemplyee");

                    b.ToTable("salerypayment");
                });

            modelBuilder.Entity("TheModels.Models.UnitProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AdvertisementForTheCustomer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("IdFloor")
                        .HasColumnType("int");

                    b.Property<int>("IdProject")
                        .HasColumnType("int");

                    b.Property<int?>("IdResetvationsale")
                        .HasColumnType("int");

                    b.Property<int>("Idcategory")
                        .HasColumnType("int");

                    b.Property<byte[]>("MapImage")
                        .HasMaxLength(10000000)
                        .HasColumnType("longblob");

                    b.Property<double>("SpaceMater")
                        .HasColumnType("double");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdFloor");

                    b.HasIndex("IdProject");

                    b.HasIndex("IdResetvationsale");

                    b.HasIndex("Idcategory");

                    b.ToTable("unitproject");
                });

            modelBuilder.Entity("TheModels.Models.Weight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CountOfSmall")
                        .HasColumnType("double");

                    b.Property<int?>("IdWeightsmall")
                        .HasColumnType("int");

                    b.Property<string>("NameWeight")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("varchar(31)");

                    b.HasKey("Id");

                    b.HasIndex("IdWeightsmall");

                    b.ToTable("weight");
                });

            modelBuilder.Entity("TheModels.Models.AttendingAndLeaving", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany("AttendingAndLeavings")
                        .HasForeignKey("Idemplyee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.BuildingCost", b =>
                {
                    b.HasOne("TheModels.Models.Materials", "Material")
                        .WithMany()
                        .HasForeignKey("IdMaterial");

                    b.HasOne("TheModels.Models.Project", "Project")
                        .WithMany("BuildingCosts")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TheModels.Models.Materials", b =>
                {
                    b.HasOne("TheModels.Models.Weight", "Weight")
                        .WithMany()
                        .HasForeignKey("Idweight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("TheModels.Models.PaymentMoney", b =>
                {
                    b.HasOne("TheModels.Models.ResertvationAndSale", "RevervationSale")
                        .WithMany("PaymentMoney")
                        .HasForeignKey("Idsale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RevervationSale");
                });

            modelBuilder.Entity("TheModels.Models.ProjectImage", b =>
                {
                    b.HasOne("TheModels.Models.Project", "Project")
                        .WithMany("ProjectImages")
                        .HasForeignKey("Idproject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TheModels.Models.ResertvationAndSale", b =>
                {
                    b.HasOne("TheModels.Models.Customer", "ToCustomer")
                        .WithMany("Units")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Emplyee", "ByEmplyee")
                        .WithMany("AllSalesFormThisEmplyee")
                        .HasForeignKey("IdEmplyee");

                    b.HasOne("TheModels.Models.UnitProject", "Unit")
                        .WithMany()
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ByEmplyee");

                    b.Navigation("ToCustomer");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TheModels.Models.SaleryPayment", b =>
                {
                    b.HasOne("TheModels.Models.Emplyee", "Emplyee")
                        .WithMany("saleryPayments")
                        .HasForeignKey("Idemplyee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emplyee");
                });

            modelBuilder.Entity("TheModels.Models.UnitProject", b =>
                {
                    b.HasOne("TheModels.Models.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("IdFloor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.Project", "Project")
                        .WithMany("UnitProjects")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheModels.Models.ResertvationAndSale", "ReservationSale")
                        .WithMany()
                        .HasForeignKey("IdResetvationsale");

                    b.HasOne("TheModels.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Idcategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Floor");

                    b.Navigation("Project");

                    b.Navigation("ReservationSale");
                });

            modelBuilder.Entity("TheModels.Models.Weight", b =>
                {
                    b.HasOne("TheModels.Models.Weight", "Weightsmall")
                        .WithMany()
                        .HasForeignKey("IdWeightsmall");

                    b.Navigation("Weightsmall");
                });

            modelBuilder.Entity("TheModels.Models.Customer", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("TheModels.Models.Emplyee", b =>
                {
                    b.Navigation("AllSalesFormThisEmplyee");

                    b.Navigation("AttendingAndLeavings");

                    b.Navigation("saleryPayments");
                });

            modelBuilder.Entity("TheModels.Models.Project", b =>
                {
                    b.Navigation("BuildingCosts");

                    b.Navigation("ProjectImages");

                    b.Navigation("UnitProjects");
                });

            modelBuilder.Entity("TheModels.Models.ResertvationAndSale", b =>
                {
                    b.Navigation("PaymentMoney");
                });
#pragma warning restore 612, 618
        }
    }
}
